{
    "phantom": {
        "waitForJS": true
    },
    "recipe": "chrome-pdf",
    "engine": "handlebars",
    "scripts": [
        {
            "shortid": "BJX1Jw82ce"
        }
    ],
    "shortid": "HJH11D83ce",
    "modificationDate": {
        "$$date": 1521401990989
    },
    "_id": "yVQb6HsiCwhWSZbX",
    "$entitySet": "templates",
    "name": "Orders",
    "content": "<!-- \r\nCustom server side script is used to fetch data from the remote REST API server,\r\nhandlebars to render html and phantom-pdf recipe to convert html into pdf.\r\nThe template also uses helper function toJSON defined in global helpers asset.\r\n\r\nIt requires allowed http module in scripts in the configuration file:\r\n\"scripts\": { \"allowedModules\": [\"http\"] }\r\n!-->\r\n<html>\r\n  <head>\r\n    <meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\">\r\n    <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/olton/Metro-UI-CSS/master/build/css/metro.min.css\">\r\n    <script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.6/Chart.min.js'></script>\r\n  </head>\r\n  <body>\r\n    <h1>{{country}}</h1>\r\n    \r\n    <canvas id='orders' style=\"margin-top:30px\"></canvas>\r\n    <table class=\"table striped\">\r\n        <thead>\r\n            <tr>\r\n                <th>OrderID</th>\r\n                <th>ShipAddress</th>\r\n                <th>ShipCity</th>\r\n                <th>ShipCountry</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {{#each orders}}\r\n            <tr>\r\n                <td>{{OrderID}}</td>\r\n                <td>{{ShipAddress}}</td>\r\n                <td>{{ShipCity}}</td>\r\n                <td>{{ShipCountry}}</td>\r\n            </tr>\r\n            {{/each}}\r\n        </tbody>\r\n    </table>\r\n    \r\n    <script>      \r\n        var data = {{{toJSON this}}}\r\n        \r\n        Chart.defaults.global.legend.display = false;\r\n        \r\n        new Chart(orders.getContext(\"2d\"), {\r\n            type: 'bar',\r\n            data: {\r\n                labels: Object.keys(data.accumulatedOrders),\r\n                datasets: [{\r\n                    fillColor: 'blue',\r\n                    label: \"Orders in time\",\r\n                    backgroundColor: \"rgba(27,161,226,0.2)\",\r\n                    borderColor: \"rgba(27,161,226,1)\",\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: \"rgba(27,161,226,0.4)\",\r\n                    hoverBorderColor: \"rgba(27,161,226,1)\",\r\n                    data: Object.keys(data.accumulatedOrders).map(function (o) {\r\n                        return data.accumulatedOrders[o].value;\r\n                    })\r\n                }]\r\n                \r\n            },\r\n            options: {\r\n                animation: {\r\n                    onComplete: function () {\r\n                        // set the PDF printing trigger when the animation is done\r\n                        // to have this working, the phantom-pdf menu in the left must\r\n                        // have the wait for printing trigger option selected\r\n                        window.JSREPORT_READY_TO_START = true\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    </script>    \r\n  </body>\r\n</html>\r\n\r\n\r\n\r\n",
    "helpers": ""
}